// <auto-generated />
using DataBaseActions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseActions.Migrations
{
    [DbContext(typeof(KostPostMusicContext))]
    partial class KostPostMusicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassesData.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("accounts");

                    b.HasDiscriminator<int>("AccountType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClassesData.AdminAccount", b =>
                {
                    b.HasBaseType("ClassesData.Account");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("integer");

                    b.ToTable("accounts");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ClassesData.UserAccount", b =>
                {
                    b.HasBaseType("ClassesData.Account");

                    b.ToTable("accounts");

                    b.HasDiscriminator().HasValue(0);
                });
#pragma warning restore 612, 618
        }
    }
}
